import java.awt.Point;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

/**
 * A factory for shapes of potentials generated by various objects.
 * 
 * @author wesley
 *
 */
public class InfluenceShapes {
	private static Map<Point, Integer> bulletPattern;
	private static Map<Point, Integer> playerPattern;
	private static Map<Point, Integer> playerWithLaserPattern;

	public static final int DANGER_FACTOR = 50;

	public static Map<Point, Integer> getBulletPattern() {
		// Lazy init
		if (bulletPattern == null) {
			bulletPattern = new HashMap<Point, Integer>();
			// Forward line
			bulletPattern.put(new Point(0, 1), (int) (0.1 * DANGER_FACTOR));
			bulletPattern.put(new Point(0, 2), (int) (0.9 * DANGER_FACTOR));
			bulletPattern.put(new Point(0, 3), (int) (0.6 * DANGER_FACTOR));
			bulletPattern.put(new Point(0, 4), (int) (0.4 * DANGER_FACTOR));
			// Side threats
			bulletPattern.put(new Point(1, 1), (int) (0.4 * DANGER_FACTOR));
			bulletPattern.put(new Point(-1, 1), (int) (0.4 * DANGER_FACTOR));
			bulletPattern.put(new Point(2, 1), (int) (0.2 * DANGER_FACTOR));
			bulletPattern.put(new Point(-2, 1), (int) (0.2 * DANGER_FACTOR));
		}
		return bulletPattern;
	}

	public static Map<Point, Integer> getPlayerPattern(boolean hasLaser) {
		// Lazy init playerPattern
		if (playerPattern == null) {
			// Potential of being imminently shot at
			playerPattern = new HashMap<Point, Integer>(getBulletPattern());
			// Longshots
			playerPattern.put(new Point(0, 5), (int) (0.2 * DANGER_FACTOR));
			playerPattern.put(new Point(0, 6), (int) (0.2 * DANGER_FACTOR));
			playerPattern.put(new Point(0, 7), (int) (0.1 * DANGER_FACTOR));
			// Potential of getting turned on
			playerPattern.put(new Point(-1, 0), (int) (0.4 * DANGER_FACTOR));
			playerPattern.put(new Point(1, 0), (int) (0.4 * DANGER_FACTOR));
			playerPattern.put(new Point(1, -1), (int) (0.4 * DANGER_FACTOR));
		}

		// The player has a laser!
		if (hasLaser) {
			// Lazy init playerWithLaser
			if (playerWithLaserPattern == null) {
				playerWithLaserPattern = new HashMap<Point, Integer>(playerPattern);
				getTurretPattern(0).forEach((k, v) -> playerWithLaserPattern.merge(k, v, (v1, v2) -> v1 + v2));
			}
			return playerWithLaserPattern;
		}

		return playerPattern;
	}

	public static Map<Point, Integer> getTurretPattern(int framesToFire) {
		// Turrets always have different patterns based on framesToFire
		Map<Point, Integer> pattern = new HashMap<Point, Integer>();
		int threat = (int) ((1 - framesToFire * 0.2) * DANGER_FACTOR);
		if (threat < 0) {
			// Nothing to see here...
			return Collections.emptyMap();
		}
		// Build a threat map in four directions
		int[] directions = { -1, 1 };
		for (int i : directions) {
			for (int x = i; x != 4 * i + i; x += i) {
				pattern.put(new Point(x, 0), threat);
			}
			for (int y = i; y != 4 * i + i; y += i) {
				pattern.put(new Point(0, y), threat);
			}
		}
		return pattern;
	}

}
